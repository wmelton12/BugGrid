// Generated by CoffeeScript 1.6.3
(function() {
  var GridBug;

  GridBug = (function() {
    function GridBug(plane, x, y, gx, gy) {
      this.plane = plane;
      this.x = x;
      this.y = y;
      this.gx = gx;
      this.gy = gy;
      this.dir = this.plane.EAST;
      this.wallFollowing = false;
      this.firstLap = true;
      this.shortestPoint = [];
      this.encounteredObj = [];
      this.plane.drawPoint(this.x, this.y);
      this.plane.drawPointCol(this.gx, this.gy, "red");
    }

    GridBug.prototype.manhattanDistance = function(x1, y1, x2, y2) {
      return Math.abs(y2 - y1) + Math.abs(x2 - x1);
    };

    GridBug.prototype.frontIsClear = function() {
      return this.plane.canMove(this.x, this.y, this.dir);
    };

    GridBug.prototype.leftIsClear = function() {
      if (this.dir !== this.plane.SOUTH) {
        return this.plane.canMove(this.x, this.y, this.dir + 90);
      } else {
        return this.plane.canMove(this.x, this.y, this.plane.EAST);
      }
    };

    GridBug.prototype.rightIsClear = function() {
      if (this.dir !== this.plane.EAST) {
        return this.plane.canMove(this.x, this.y, this.dir - 90);
      } else {
        return this.plane.canMove(this.x, this.y, this.plane.SOUTH);
      }
    };

    GridBug.prototype.backIsClear = function() {
      if ((this.dir === this.plane.EAST) || (this.dir === this.plane.NORTH)) {
        return this.plane.canMove(this.x, this.y, this.dir + 180);
      } else {
        return this.Plane.canMove(this.x, this.y, this.dir - 180);
      }
    };

    GridBug.prototype.turnLeft = function() {
      if (this.dir === this.plane.EAST) {
        return this.dir = this.plane.NORTH;
      } else if (this.dir === this.plane.NORTH) {
        return this.dir = this.plane.WEST;
      } else if (this.dir === this.plane.WEST) {
        return this.dir = this.plane.SOUTH;
      } else if (this.dir === this.plane.SOUTH) {
        return this.dir = this.plane.EAST;
      }
    };

    GridBug.prototype.turnRight = function() {
      if (this.dir === this.plane.EAST) {
        return this.dir = this.plane.SOUTH;
      } else if (this.dir === this.plane.NORTH) {
        return this.dir = this.plane.EAST;
      } else if (this.dir === this.plane.WEST) {
        return this.dir = this.plane.NORTH;
      } else if (this.dir === this.plane.SOUTH) {
        return this.dir = this.plane.WEST;
      }
    };

    GridBug.prototype.ensureWallToLeft = function() {
      var i;
      i = 0;
      while (i < 4) {
        if (!this.leftIsClear()) {
          return true;
        }
        this.turnLeft();
        i++;
      }
      return false;
    };

    GridBug.prototype.orientTowardGoal = function() {
      var angle;
      angle = Math.atan((this.gy - this.y) / (this.gx - this.x));
      if (angle < 0) {
        angle = 360 + angle;
      }
      if (angle < 45 || angle >= 315) {
        return this.dir = this.plane.EAST;
      } else if ((45 <= angle && angle < 135)) {
        return this.dir = this.plane.NORTH;
      } else if ((135 <= angle && angle < 225)) {
        return this.dir = this.plane.WEST;
      } else if ((225 <= angle && angle < 315)) {
        return this.dir = this.plane.SOUTH;
      }
    };

    GridBug.prototype.dist = function(x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    };

    GridBug.prototype.faceAwayFromWall = function() {};

    GridBug.prototype.moveStraight = function() {
      if (!this.plane.canMove(this.x, this.y, this.dir)) {
        return false;
      }
      if (this.dir === this.plane.EAST) {
        this.x++;
      } else if (this.dir === this.plane.NORTH) {
        this.y--;
      } else if (this.dir === this.plane.WEST) {
        this.x--;
      } else if (this.dir === this.plane.SOUTH) {
        this.y++;
      }
      this.plane.drawPoint(this.x, this.y);
      return true;
    };

    GridBug.prototype.move = function() {
      if (!this.goalIsReached()) {
        if (!this.wallFollowing) {
          if (this.frontIsClear()) {
            this.orientTowardGoal();
            this.moveStraight();
          } else {
            alert("Start wallFollow");
            this.wallFollowing = true;
            this.firstLap = true;
            this.ensureWallToLeft();
            this.shortestPoint = {
              x: this.x,
              y: this.y
            };
            this.encounteredObj = {
              x: this.x,
              y: this.y
            };
          }
        } else {
          if (!this.firstLap) {
            this.wallFollow();
            if (this.atPoint(this.encounteredObj.x, this.encounteredObj.y)) {
              this.firstLap = false;
            } else if (this.manhattanDistance(this.x, this.y, this.gx, this.gy) < this.manhattanDistance(this.shortestPoint.x, this.shortestPoint.y, this.gx, this.gy)) {
              this.shortestPoint = {
                x: this.x,
                y: this.y
              };
            }
          } else {
            if (!this.atPoint(this.shortestPoint.x, this.shortestPoint.y)) {
              wallFollow();
            } else {
              this.orientTowardGoal();
              this.wallFollowing = false;
            }
            return true;
          }
        }
      }
    };

    GridBug.prototype.goalIsReached = function() {
      if (this.x === this.gx && this.y === this.gy) {
        return true;
      } else {
        return false;
      }
    };

    return GridBug;

  })();

  ({
    goToGoal: function() {
      var _results;
      _results = [];
      while (!this.goalIsReached()) {
        _results.push(this.orientTowardGoal()({
          moveUntilHitWall: function() {
            var _results1;
            _results1 = [];
            while (!!this.frontIsClear()) {
              _results1.push(this.moveStraight());
            }
            return _results1;
          },
          wallFollow: function() {
            if (!this.leftIsClear() && this.frontIsClear()) {
              return this.moveStraight();
            } else if (!this.leftIsCelar() && !this.frontIsClear()) {
              this.turnRight();
              return this.moveStraight();
            } else if (this.leftIsClear()) {
              this.turnLeft();
              return this.moveStraight();
            }
          },
          atPoint: function(px, py) {
            return px === this.x && py === this.y;
          }
        }));
      }
      return _results;
    }
  });

  this.GridBug = GridBug;

}).call(this);
