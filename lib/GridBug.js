// Generated by CoffeeScript 1.6.3
(function() {
  var GridBug;

  GridBug = (function() {
    function GridBug(plane, x, y, gx, gy) {
      this.plane = plane;
      this.x = x;
      this.y = y;
      this.gx = gx;
      this.gy = gy;
      this.dir = this.plane.EAST;
      this.wallFollowing = false;
      this.plane.drawPoint(this.x, this.y);
    }

    GridBug.prototype.frontIsClear = function() {
      return this.plane.canMove(this.x, this.y, this.dir);
    };

    GridBug.prototype.leftIsClear = function() {
      if (this.dir !== this.plane.SOUTH) {
        return this.plane.canMove(this.x, this.y, this.dir + 90);
      } else {
        return this.plane.canMove(this.x, this.y, this.plane.EAST);
      }
    };

    GridBug.prototype.rightIsClear = function() {
      if (this.dir !== this.plane.EAST) {
        return this.plane.canMove(this.x, this.y, this.dir - 90);
      } else {
        return this.plane.canMove(this.x, this.y, this.plane.SOUTH);
      }
    };

    GridBug.prototype.backIsClear = function() {
      if ((this.dir === this.plane.EAST) || (this.dir === this.plane.NORTH)) {
        return this.plane.canMove(this.x, this.y, this.dir + 180);
      } else {
        return this.Plane.canMove(this.x, this.y, this.dir - 180);
      }
    };

    GridBug.prototype.turnLeft = function() {
      if (this.dir === this.plane.EAST) {
        return this.dir = this.plane.NORTH;
      } else if (this.dir === this.plane.NORTH) {
        return this.dir = this.plane.WEST;
      } else if (this.dir === this.plane.WEST) {
        return this.dir = this.plane.SOUTH;
      } else if (this.dir === this.plane.SOUTH) {
        return this.dir = this.plane.EAST;
      }
    };

    GridBug.prototype.turnRight = function() {
      if (this.dir === this.plane.EAST) {
        return this.dir = this.plane.SOUTH;
      } else if (this.dir === this.plane.NORTH) {
        return this.dir = this.plane.EAST;
      } else if (this.dir === this.plane.WEST) {
        return this.dir = this.plane.NORTH;
      } else if (this.dir === this.plane.SOUTH) {
        return this.dir = this.plane.WEST;
      }
    };

    GridBug.prototype.ensureWallToLeft = function() {
      var _results;
      _results = [];
      while (this.leftIsClear()) {
        _results.push(this.turnLeft());
      }
      return _results;
    };

    GridBug.prototype.orientTowardGoal = function() {
      var angle;
      angle = Math.atan((this.gy - this.y) / (this.gx - this.x));
      if (angle < 0) {
        angle = 360 + angle;
      }
      if (angle < 45 || angle >= 315) {
        return this.dir = this.plane.EAST;
      } else if ((45 <= angle && angle < 135)) {
        return this.dir = this.plane.NORTH;
      } else if ((135 <= angle && angle < 225)) {
        return this.dir = this.plane.WEST;
      } else if ((225 <= angle && angle < 315)) {
        return this.dir = this.plane.SOUTH;
      }
    };

    GridBug.prototype.dist = function(x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    };

    GridBug.prototype.faceAwayFromWall = function() {};

    GridBug.prototype.moveStraight = function() {
      if (this.dir === this.plane.EAST) {
        return this.x++;
      } else if (this.dir === this.plane.NORTH) {
        return this.y--;
      } else if (this.dir === this.plane.WEST) {
        return this.x--;
      } else if (this.dir === this.plane.SOUTH) {
        return this.y++;
      }
    };

    GridBug.prototype.move = function() {
      if (this.wallFollowing) {
        if (this.frontIsClear() && !this.leftIsClear()) {
          this.moveStraight();
        } else if (!this.frontIsClear() && !this.leftIsClear()) {
          this.turnLeft();
        } else if (this.leftIsClear()) {
          this.turnLeft();
          this.moveStraight();
        }
      } else {
        this.orientTowardGoal();
        if (this.frontIsClear) {
          this.moveStraight();
        } else {
          alert("wallFollowing");
          this.wallFollowing = true;
          this.ensureWallToLeft();
        }
      }
      return this.plane.drawPoint(this.x, this.y);
    };

    GridBug.prototype.goalIsReached = function() {
      if (this.x === this.gx && this.y === this.gy) {
        return true;
      } else {
        return false;
      }
    };

    return GridBug;

  })();

  this.GridBug = GridBug;

}).call(this);
