// Generated by CoffeeScript 1.6.3
(function() {
  var Bug1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bug1 = (function(_super) {
    __extends(Bug1, _super);

    function Bug1(x, y, gx, gy) {
      this.x = x;
      this.y = y;
      this.gx = gx;
      this.gy = gy;
      Bug1.__super__.constructor.call(this, this.x, this.y);
      this.wallFollowing = false;
      this.firstLap = true;
      this.heading = 0;
      this.shortestPoint = {};
      this.encounteredObj = [];
    }

    Bug1.prototype.turnLeft = function() {
      return this.heading += 1;
    };

    Bug1.prototype.turnRight = function() {
      return this.heading -= 1;
    };

    Bug1.prototype.moveStraight = function() {
      this.x += 0.5 * Math.cos(this.heading);
      return this.y += 0.5 * Math.sin(this.heading);
    };

    Bug1.prototype.wallFollow = function() {
      this.orientTowardsWallFollow();
      this.x += 0.5 * Math.cos(this.heading);
      return this.y += 0.5 * Math.sin(this.heading);
    };

    Bug1.prototype.orientTowardsWallFollow = function() {
      var _results;
      _results = [];
      while (!this.frontIsClear() || this.rightIsClear() || !this.backIsClear() || this.insideObs()) {
        if (this.numCollisions >= 3) {
          this.x -= 0.5 * Math.cos(this.heading);
          _results.push(this.y -= 0.5 * Math.sin(this.heading));
        } else if (!this.frontIsClear()) {
          _results.push(this.turnLeft());
        } else if (this.rightIsClear()) {
          _results.push(this.turnRight());
        } else if (!this.backIsClear()) {
          _results.push(this.turnRight());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Bug1.prototype.frontIsClear = function() {
      var refPoints, _ref;
      refPoints = this.getRefPoints(this.x, this.y, this.heading);
      if (this.plane !== null) {
        return !(_ref = this.plane).checkCollision.apply(_ref, refPoints.front);
      } else {
        return false;
      }
    };

    Bug1.prototype.rightIsClear = function() {
      var refPoints, _ref;
      refPoints = this.getRefPoints(this.x, this.y, this.heading);
      if (this.plane !== null) {
        return !(_ref = this.plane).checkCollision.apply(_ref, refPoints.right);
      } else {
        return false;
      }
    };

    Bug1.prototype.backIsClear = function() {
      var refPoints, _ref;
      refPoints = this.getRefPoints(this.x, this.y, this.heading);
      if (this.plane !== null) {
        return !(_ref = this.plane).checkCollision.apply(_ref, refPoints.back);
      } else {
        return false;
      }
    };

    Bug1.prototype.leftIsClear = function() {
      var refPoints, _ref;
      refPoints = this.getRefPoints(this.x, this.y, this.heading);
      if (this.plane !== null) {
        return !(_ref = this.plane).checkCollision.apply(_ref, refPoints.left);
      } else {
        return false;
      }
    };

    Bug1.prototype.insideObs = function() {};

    Bug1.prototype.orientTowardsGoal = function() {
      return this.heading = this.radiansToDegrees(Math.atan((this.gy - this.y) / (this.gx - this.x)));
    };

    Bug1.prototype.atPoint = function(px, py) {
      return this.dist(this.x, this.y, px, py) < 0.05;
    };

    Bug1.prototype.atGoal = function() {
      return this.atPoint(this.gx, this.gy);
    };

    Bug1.prototype.dist = function(x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    };

    Bug1.prototype.move = function() {
      var shortestPoint;
      if (!this.wallFollowing) {
        if (this.frontIsClear()) {
          this.orientTowardsGoal();
          this.moveStraight();
        } else {
          this.x += 3 * Math.cos(this.heading);
          this.y += 3 * Math.sin(this.heading);
          this.wallFollowing = true;
          while (!this.frontIsClear() || this.rightIsClear() || !this.backIsClear() || this.insideObs()) {
            if (this.insideObs()) {
              this.x -= 0.5 * Math.cos(this.heading);
              this.y -= 0.5 * Math.sin(this.heading);
            } else if (!this.frontIsClear()) {
              this.turnLeft();
            } else if (this.rightIsClear()) {
              this.turnLeft();
            } else if (!this.backIsClear()) {
              this.turnRight();
            }
          }
          shortestPoint = {
            x: this.x,
            y: this.y
          };
          this.encounteredObj = [this.x, this.y];
        }
      } else {
        if (this.firstLap) {
          if (this.atPoint.apply(this, this.encounteredObj)) {
            this.firstLap = false;
            if (this.atPoint.apply(this, this.shortestPoint)) {
              this.wallFollowing = false;
              this.firstLap = true;
              this.orientTowardsGoal();
            }
          }
        } else {
          this.wallFollow();
          if (this.dist(this.x, this.y, this.gx, this.gy) < this.dist(this.shortestPoint.x, this.shortestPoint.y, this.gx, this.gy)) {
            this.shortestPoint = {
              x: this.x,
              y: this.y
            };
          }
          if (this.atPoint.apply(this, this.shortestPoint)) {
            this.wallFollowing = false;
            this.firstLap = true;
            this.orientTowardsGoal();
          }
        }
      }
      return this.plane.drawPoint(this.x, this.y);
    };

    return Bug1;

  })(Bug);

  this.Bug1 = Bug1;

}).call(this);
