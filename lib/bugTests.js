// Generated by CoffeeScript 1.6.3
(function() {
  var GridBug, Plane, alert, arrayEq, bug, eq, ok, plane, planeTests, print, test, _ref;

  _ref = require('testy'), test = _ref.test, ok = _ref.ok, eq = _ref.eq, arrayEq = _ref.arrayEq;

  print = console.log;

  alert = console.log;

  Plane = require('plane').Plane;

  GridBug = require('GridBug').GridBug;

  planeTests = function() {
    var E, N, S, W, bug, plane;
    Plane = require('plane').Plane;
    GridBug = require('GridBug').GridBug;
    plane = new Plane(null, 100, 100, 8, 8);
    N = plane.NORTH;
    S = plane.SOUTH;
    E = plane.EAST;
    W = plane.WEST;
    arrayEq([E, N, W, S], [0, 90, 180, 270]);
    plane.addWall(5, 5);
    plane.addWall(5, 6);
    bug = new GridBug(plane, 0, 0, 10, 10);
    test("should pass", function() {
      return eq(bug.manhattanDistance(0, 0, 2, 2), 4);
    });
    test("should pass", function() {
      return eq(bug.dir, plane.EAST);
    });
    test("should pass", function() {
      return ok(bug.moveStraight());
    });
    test("should pass", function() {
      return arrayEq([1, 0], [bug.x, bug.y]);
    });
    bug.turnLeft();
    test("should pass", function() {
      return eq(bug.dir, plane.NORTH);
    });
    bug.turnRight();
    test("should pass", function() {
      return eq(bug.dir, plane.EAST);
    });
    bug.move();
    alert([bug.x, bug.y]);
    test("should pass", function() {
      return arrayEq([2, 0], [bug.x, bug.y]);
    });
    bug.turnRight();
    test("should pass", function() {
      return eq(bug.dir, plane.SOUTH);
    });
    bug.moveStraight();
    alert([bug.x, bug.y]);
    return test("should pass", function() {
      return arrayEq([2, 1], [bug.x, bug.y]);
    });
  };

  planeTests();

  test.status();

  console.log("test2");

  plane = new Plane(null, 100, 100, 10, 10);

  plane.addWall(5, 5);

  bug = new GridBug(plane, 4, 5, 9, 5);

  test("should pass", function() {
    return arrayEq([bug.x, bug.y], [4, 5]);
  });

  test("should pass", function() {
    return eq(bug.dir, plane.EAST);
  });

  test("should pass", function() {
    return eq(false, bug.frontIsClear());
  });

  bug.turnLeft();

  test("should pass", function() {
    return eq(bug.dir, plane.NORTH);
  });

  test("should pass", function() {
    return eq(true, bug.frontIsClear());
  });

  test("should pass", function() {
    return eq(false, bug.rightIsClear());
  });

  bug.turnRight();

  bug.turnRight();

  test("should pass", function() {
    return eq(bug.dir, plane.SOUTH);
  });

  test("should pass", function() {
    return ok(bug.frontIsClear());
  });

  test("should pass", function() {
    return eq(false, bug.leftIsClear());
  });

  bug = new GridBug(plane, 0, 0, 5, 9);

  test('should pass', function() {
    return eq(bug.dir, plane.EAST);
  });

  test('should pass', function() {
    return arrayEq([bug.x, bug.y], [0, 0]);
  });

  test('should pass', function() {
    return arrayEq([bug.gx, bug.gy], [5, 9]);
  });

  bug.orientTowardGoal();

  test('should pass', function() {
    return eq(bug.dir, plane.SOUTH);
  });

  test.status();

}).call(this);
