// Generated by CoffeeScript 1.6.2
(function() {
  var Plane;

  Plane = (function() {
    'Create the planar grid upon which our bug moves.\n  ';    Plane.prototype.EAST = 0;

    Plane.prototype.NORTH = 90;

    Plane.prototype.WEST = 180;

    Plane.prototype.SOUTH = 270;

    function Plane(svg, sizeX, sizeY, width, height) {
      var X, Y, attrs, i, j;

      this.svg = svg;
      this.sizeX = sizeX;
      this.sizeY = sizeY;
      this.width = width;
      this.height = height;
      this.grid = (function() {
        var _i, _ref, _results;

        _results = [];
        for (i = _i = 1, _ref = this.width; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;

            _results1 = [];
            for (j = _j = 1, _ref1 = this.height; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
              _results1.push(0);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      X = this.sizeX / this.width;
      Y = this.sizeY / this.height;
      attrs = {
        fill: 'white',
        stroke: 'black',
        'stroke-width': 0.5
      };
      if (this.svg != null) {
        this.rects = (function() {
          var _i, _ref, _results;

          _results = [];
          for (i = _i = 1, _ref = this.width; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            _results.push((function() {
              var _j, _ref1, _results1;

              _results1 = [];
              for (j = _j = 1, _ref1 = this.height; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
                _results1.push(this.svg.rect(X, Y).move(j * X, i * Y).attr(attrs));
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }).call(this);
      }
    }

    Plane.prototype.addWall = function(x, y) {
      this.grid[y][x] = 1;
      if (this.svg != null) {
        return this.rects[x][y].style("fill", "black");
      }
    };

    Plane.prototype.canMove = function(x, y, dir) {
      'Can we move from (x,y) coordinates in direction `dir`?\n\n`dir` arg should be one of 0, 90, 180, or 270 (E, N, W, or S)\n';
      var nx, ny;

      if (dir === this.EAST) {
        nx = x + 1;
        ny = y;
      } else if (dir === this.NORTH) {
        nx = x;
        ny = y - 1;
      } else if (dir === this.WEST) {
        nx = x - 1;
        ny = y;
      } else if (dir === this.SOUTH) {
        nx = x;
        ny = y + 1;
      }
      return !this.grid[ny][nx];
    };

    Plane.prototype.drawPoint = function(x, y) {
      'Draw the point at (x,y) coordinates.';      if (this.svg != null) {
        return this.rects[y][x].style("fill", "green");
      }
    };

    Plane.prototype.clearPoint = function(x, y) {
      'Clear the point at (x,y) coordinates.';      if (this.svg != null) {
        return this.rects[y][x].style('fill', 'white');
      }
    };

    return Plane;

  })();

  this.Plane = Plane;

}).call(this);
